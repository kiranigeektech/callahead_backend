{"version":3,"file":"static/js/534.e1d7eb5a.chunk.js","mappings":"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","sources":["Socket/socket.js","Pages/Dashboard/Driver/TrackDriver/index.js"],"sourcesContent":["import { io } from \"socket.io-client\";\r\n\r\nexport const socket = io(\"http://18.212.205.10:5000\",{transports:['websocket']})\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./style.scss\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Card, Spinner } from 'react-bootstrap'\r\nimport CommanPage from \"../../CommanPage\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport ReactMapboxGl, { Marker, Popup } from 'react-mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport { GetDriverRoutes, GetDriverLastLocation } from '../../../../ApiRequests';\r\nimport { socket } from '../../../../Socket/socket'\r\nimport { NavigateIcon } from \"../../../../Components/utils/Icons/Driver\";\r\n\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\r\n\r\nlet Token = 'pk.eyJ1IjoiY2FsbGFoZWFkIiwiYSI6ImNsMXc2aDJueTBnZWIzam1wa29pNGozM2cifQ.TVMTneGJ2zs9WGZvarWLFA'\r\nconst Map = ReactMapboxGl({\r\n    accessToken: Token\r\n});\r\n\r\nconst Drivertrack = () => {\r\n    const locationData = useLocation();\r\n    const init = {\r\n        id: \"\",\r\n        name: \"\",\r\n    }\r\n    const [driver, setdriver] = useState(init)\r\n    const [token, settoken] = useState(\"\")\r\n    const [Coordinate, setCoordinate] = useState([])\r\n    const [popupstatus, setpopupstatus] = useState(null)\r\n    const [socketdata, setsocketdata] = useState(null)\r\n    const [initcoordinate, setinitcoordinate] = useState([])\r\n    const [lastlocation, setlastlocation] = useState([])\r\n    const [navigate, setnavigate] = useState()\r\n    const [isLoading, setisLoading] = useState(true)\r\n\r\n    // get Location from Socket\r\n    socket.on(`driverLocation/${driver.id}`, (data) => {\r\n        setsocketdata(data)\r\n    })\r\n\r\n    // extra useEffect forsocketdata log \r\n    useEffect(() => {\r\n        if (socketdata) {\r\n            console.log(\"socketdata\", socketdata)\r\n        }\r\n    }, [socketdata])\r\n    \r\n    useEffect(() => {\r\n        if (locationData) {\r\n            const userdata = localStorage.getItem(\"driver_data\")\r\n            const data = JSON.parse(userdata)\r\n            if (data) {\r\n                const driverdata = {\r\n                    id: data.ID,\r\n                    name: data.NAME\r\n                }\r\n                setdriver(driverdata)\r\n            }\r\n        }\r\n        return () => {\r\n            localStorage.removeItem(\"driver_data\");\r\n            setdriver(init);\r\n        };\r\n    }, [locationData])\r\n\r\n    useEffect(() => {\r\n        const tokenData = localStorage.getItem(\"auth\");\r\n        settoken(JSON.parse(tokenData));\r\n    }, []);\r\n\r\n    // get driver details from backend\r\n    useEffect(() => {\r\n        setisLoading(true)\r\n        if (driver?.id) {\r\n            GetDriverRoutes(token, driver.id)\r\n                .then((res) => {\r\n                    const Apidata = res.data.data\r\n                    const map = Apidata.map((i) => (\r\n                        [\r\n                            Number(i.customer.maplong),\r\n                            Number(i.customer.maplat),\r\n                            (i.submited_route.status),\r\n                            (i.submited_route.reason),\r\n                            (i.submited_route.status),\r\n                            (i.customer.siteaddr),\r\n                            (i.customer.sitephone),\r\n                            (i.customer.sitename),\r\n                            (i.route.stopnum),\r\n                        ]\r\n                    ))\r\n                    const init = Apidata.map((i) => (\r\n                        [\r\n                            Number(i.customer.maplong),\r\n                            Number(i.customer.maplat)\r\n                        ]\r\n                    ))\r\n                    setCoordinate(map)\r\n                    setinitcoordinate(init)\r\n                    setisLoading(false)\r\n                })\r\n        }\r\n    }, [driver.id])\r\n\r\n    // driver last location\r\n    useEffect(() => {\r\n        if (driver?.id) {\r\n            GetDriverLastLocation(token, driver.id)\r\n                .then((res) => {\r\n                    const location = [res.data.data]\r\n                    const locate = location.map((location) => (\r\n                        [\r\n                            location?.lat ? Number(location.lat) : null,\r\n                            location?.long ? Number(location.long) : null\r\n                        ]\r\n                    ))\r\n                    setlastlocation(locate)\r\n                })\r\n        }\r\n    }, [driver.id])\r\n\r\n    const selectedmarker = (e, selectedpin) => {\r\n        e.preventDefault();\r\n        setpopupstatus(selectedpin)\r\n    }\r\n\r\n    const closepopup = (e) => {\r\n        e.preventDefault();\r\n        setpopupstatus(null)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {/* helmet is use to change a title tag */}\r\n            <Helmet>\r\n                <title>Truck Tracking | Dashboard | Track</title>\r\n            </Helmet>\r\n            {/* CommanPage is user for basic structure of page */}\r\n            <CommanPage>\r\n                <div className=\"Trackdriver\">\r\n                    <div className=\"Trackdriver__title\">\r\n                        <div> TRACKING {\">\"}  {driver.name} </div>\r\n                    </div>\r\n                    <Card className=\"common_card\">\r\n                        <div className=\"Trackdriver__map\">\r\n                            {isLoading ?\r\n                                <div className=\"Trackdriver__map--spinner\">\r\n                                    <Spinner animation=\"border\" />\r\n                                </div>\r\n                                :\r\n                                <Map\r\n                                    onStyleData={el =>\r\n                                        el.setZoom(16)\r\n                                    }\r\n                                    style=\"mapbox://styles/mapbox/streets-v9\"\r\n                                    center={\r\n                                        navigate ?\r\n                                            navigate :\r\n                                            (initcoordinate && initcoordinate.length > 0) ?\r\n                                                initcoordinate[0] : [72.8246169, 21.2357561]\r\n                                    }\r\n                                    containerStyle={{\r\n                                        height: '63vh',\r\n                                        width: '100wh'\r\n                                    }}\r\n                                    movingMethod=\"flyTo\"\r\n                                >\r\n                                    {Coordinate.map((i, index) => {\r\n                                        return (\r\n                                            <div key={index}>\r\n                                                <Marker\r\n                                                    style={{ marginBottom: \"40px\" }}\r\n                                                    coordinates={[i[0], i[1]]}\r\n                                                    anchor=\"bottom\"\r\n                                                >\r\n                                                    <div>\r\n                                                        <img className=\"Trackdriver__map--mappin\"\r\n                                                            src={!i[2] ?\r\n                                                                \"/assets/image/customer-icon.png\" :\r\n                                                                i[2] === \"Partially Completed\" ?\r\n                                                                    \"/assets/image/partial-complete.png\" :\r\n                                                                    i[2] === \"failed\" ?\r\n                                                                        \"/assets/image/failed.png\" :\r\n                                                                        \"/assets/image/success.png\"\r\n                                                            }\r\n                                                            onClick={(e) => {\r\n                                                                e.preventDefault();\r\n                                                                selectedmarker(e, i)\r\n                                                            }}\r\n                                                        />\r\n                                                    </div>\r\n                                                </Marker>\r\n                                                {socketdata ?\r\n                                                    socketdata &&\r\n                                                    <Marker\r\n                                                        style={{ padding: \"0px 30px\" }}\r\n                                                        anchor=\"bottom\"\r\n                                                        coordinates={\r\n                                                            (socketdata && (socketdata.is_online && (socketdata.user_location && socketdata.user_location.length > 1)))\r\n                                                                ?\r\n                                                                [socketdata.user_location[1], socketdata.user_location[0]] :\r\n                                                                initcoordinate[0]\r\n                                                        }\r\n                                                    >\r\n                                                        <img className=\"maptruck\" style={{ transform: `rotate(${socketdata?.course || 0}deg)` }} src=\"/assets/image/truck-icon.png\" />\r\n                                                    </Marker>\r\n                                                    : lastlocation[0] &&\r\n                                                    <Marker\r\n                                                        anchor=\"bottom\"\r\n                                                        coordinates={\r\n                                                            (lastlocation && lastlocation.length > 0 && lastlocation[0].length > 0 && (lastlocation[0][1] && lastlocation[0][0]) && (typeof lastlocation[0][0] === \"number\" &&\r\n                                                                typeof lastlocation[0][1] === \"number\")) ? [lastlocation[0][1], lastlocation[0][0]] : (initcoordinate && initcoordinate.length > 0) ? initcoordinate[0] : [72.8246169, 21.2357561]\r\n                                                        }\r\n                                                    >\r\n                                                        <img className=\"maptruck\" src=\"/assets/image/truck-icon.png\" />\r\n                                                    </Marker>\r\n                                                }\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                    {popupstatus &&\r\n                                        <Popup\r\n                                            anchor=\"bottom\"\r\n                                            coordinates={[popupstatus[0], popupstatus[1]]}\r\n                                            offset={{\r\n                                                'bottom-left': [12, -38],\r\n                                                'bottom': [0, -41],\r\n                                                'bottom-right': [-12, -38]\r\n                                            }}\r\n                                        >\r\n                                            <div className=\"Popup\">\r\n                                                <div className=\"close\">\r\n                                                    <div>\r\n                                                        <p>{popupstatus[3] === null ?\r\n                                                            <b>Pending</b> :\r\n                                                            <b>{popupstatus[4].charAt(0).toUpperCase() + popupstatus[4].slice(1)}</b>}\r\n                                                        </p>\r\n                                                    </div>\r\n                                                    <img src=\"/assets/image/close.png\"\r\n                                                        onClick={(e) => {\r\n                                                            e.preventDefault();\r\n                                                            closepopup(e)\r\n                                                        }} />\r\n                                                </div>\r\n                                                <p><b>Site Name</b>  : {popupstatus[7]}</p>\r\n                                                <p><b>Address</b>  : {popupstatus[5]}</p>\r\n                                                <p><b>Reason</b> : {popupstatus[3]} </p>\r\n                                                <p><b>Site Num</b> : {popupstatus[6]}</p>\r\n                                                <p><b>Stop Num</b> : {popupstatus[8]}</p>\r\n                                            </div>\r\n                                        </Popup>\r\n                                    }\r\n                                    <div className=\"Trackdriver__navigateicon\"\r\n                                        onClick={() => {\r\n                                            if (socketdata && (socketdata.is_online && (socketdata.user_location && socketdata.user_location.length > 1))) {\r\n                                                setnavigate([socketdata.user_location[1], socketdata.user_location[0]])\r\n                                            }\r\n                                            else if (lastlocation && lastlocation.length > 0 && lastlocation[0].length > 0 && (lastlocation[0][1] && lastlocation[0][0]) && (typeof lastlocation[0][0] === \"number\" &&\r\n                                                typeof lastlocation[0][1] === \"number\")) {\r\n                                                setnavigate([lastlocation[0][1], lastlocation[0][0]])\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        <NavigateIcon />\r\n                                    </div>\r\n                                </Map>\r\n                            }\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </CommanPage>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Drivertrack"],"names":["socket","io","transports","mapboxgl","require","Map","ReactMapboxGl","accessToken","locationData","useLocation","init","id","name","useState","driver","setdriver","token","settoken","Coordinate","setCoordinate","popupstatus","setpopupstatus","socketdata","setsocketdata","initcoordinate","setinitcoordinate","lastlocation","setlastlocation","navigate","setnavigate","isLoading","setisLoading","on","data","useEffect","console","log","userdata","localStorage","getItem","JSON","parse","driverdata","ID","NAME","removeItem","tokenData","GetDriverRoutes","then","res","Apidata","map","i","Number","customer","maplong","maplat","submited_route","status","reason","siteaddr","sitephone","sitename","route","stopnum","GetDriverLastLocation","locate","location","lat","long","Helmet","CommanPage","className","Card","Spinner","animation","onStyleData","el","setZoom","style","center","length","containerStyle","height","width","movingMethod","index","marginBottom","coordinates","anchor","src","onClick","e","preventDefault","selectedpin","selectedmarker","padding","is_online","user_location","transform","course","offset","charAt","toUpperCase","slice","closepopup"],"sourceRoot":""}