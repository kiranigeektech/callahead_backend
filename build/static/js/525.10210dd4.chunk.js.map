{"version":3,"file":"static/js/525.10210dd4.chunk.js","mappings":"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","sources":["Components/Driver/ConfirmationModal/ConfirmationModal.js","Components/Driver/DriverList.js","Components/Print/ComponentToPrint.js","Components/Driver/CenterModel/CenterModel.js","Components/Print/PrintDriver.js","Pages/Dashboard/Driver/index.js"],"sourcesContent":["import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nconst ConfirmationModal = ({ openModal, handleClose, handleDeleteFun }) => {\n  return (\n    <div>\n      <Modal show={openModal} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Delete Driver</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <p>Are you sure want to delete this driver?</p>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button onClick={handleClose} variant=\"secondary\">\n            Close\n          </Button>\n          <Button\n            className=\"DriverDashboard__content__nav--btn\"\n            variant=\"primary\"\n            onClick={handleDeleteFun}\n          >\n            Delete\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ConfirmationModal;\n","import React, { useState, useEffect } from \"react\";\n\nimport { DeleteIcon, PensilIcon, Tracking } from \"../../Components/utils/Icons/Driver\";\n// history import\nimport { useNavigate } from \"react-router-dom\";\nimport { DeleteDriverApi } from \"../../ApiRequests\";\nimport ConfirmationModal from \"./ConfirmationModal/ConfirmationModal\";\nimport \"./style.scss\";\nimport { toast } from \"react-toastify\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst DriverList = ({ driverListData, isLoading, switchData }) => {\n  const navigate = useNavigate();\n  const [listDriver, setlistDriver] = useState([]);\n\n  const [openDeleteModal, setopenDeleteModal] = useState(false);\n  const [SelectedId, setSelectedId] = useState(null);\n\n  useEffect(() => {\n    if (driverListData) {\n      setlistDriver(driverListData);\n    }\n  }, [driverListData]);\n\n  const onDeleteDriver = () => {\n    if (SelectedId) {\n      const deleteData = {\n        id: SelectedId,\n      };\n      const tokenData = localStorage.getItem(\"auth\");\n\n      DeleteDriverApi(JSON.parse(tokenData), deleteData, switchData)\n        .then((res) => {\n          console.log(res);\n          if (res.data.success) {\n            const existData = Array.from(listDriver);\n            const newData = existData.filter((data) => {\n              return data.ID !== SelectedId;\n            });\n            setlistDriver(newData);\n            setopenDeleteModal(false);\n            setSelectedId(null);\n            toast.success(\"Driver suceessfully deleted!\");\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const handleEditData = (editData) => {\n    const EditDriverOA = Object.assign({}, editData);\n    EditDriverOA.is_friday_drivers = switchData;\n    const stringyfyDatED = JSON.stringify(EditDriverOA);\n    localStorage.setItem(\"edit_user\", stringyfyDatED);\n    navigate(\"/dashboard/driver/edit\");\n  };\n\n  const map = (driverdata) => {\n    if (driverdata.ROUTE && driverdata.ROUTE_DAY) {\n      const tmpData = Object.assign({}, driverdata);\n      const stringyfyDatED = JSON.stringify(tmpData);\n      localStorage.setItem(\"driver_data\", stringyfyDatED);\n      navigate(\"/dashboard/driver/track\")\n    }\n  } \n  \n  return (\n    <React.Fragment>\n      \n      {isLoading ?\n        <div className=\"spinner\">\n          <Spinner animation=\"border\" />\n        </div>\n        :\n        <table className=\"custome_table\">\n          <thead>\n            <tr>\n              {/* <th className=\"custome_table--th\">Code</th> */}\n              <th className=\"custome_table--th\">Name</th>\n              <th className=\"custome_table--th\">Route</th>\n              <th className=\"custome_table--th\">County</th>\n              <th className=\"custome_table--th\">Truck</th>\n              <th className=\"custome_table--th\">MB</th>\n              <th className=\"custome_table--th\">Notes</th>\n              <th className=\"custome_table--th\">Phone</th>\n              <th className=\"custome_table--th\">Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {listDriver\n              ? listDriver.map((data, index) => {\n                return (\n                  <React.Fragment key={index}>\n                    <tr className=\"custome_table--tr\">\n                      {/* <td className=\"custome_table--td\">{data.ID}</td> */}\n                      <td className=\"custome_table--td\">{data.NAME}</td>\n                      <td className=\"custome_table--td\">{data.ROUTE}</td>\n                      <td className=\"custome_table--td\">{data.COUNTY}</td>\n                      <td className=\"custome_table--td\">{data.TRUCK}</td>\n                      <td className=\"custome_table--td\">{data.MB}</td>\n                      <td className=\"custome_table--td\">{data.NOTES}</td>\n                      <td className=\"custome_table--td\">{data.PHONE}</td>\n                      <td className=\"custome_table--td\">\n                        <div className=\"Driver-action\">\n                          <div className={`Driver-action${data.ROUTE && data.ROUTE_DAY ?\n                            \"--tracking_active\" :\n                            \"--tracking_inactive\"}`}\n                            // \"Driver-action--tracking_active\"\n                            onClick={() => {\n                              map(data)\n                            }}>\n                            <Tracking />\n                          </div>\n                          <div className=\"Driver-action--pensil\">\n                            <PensilIcon\n                              onClick={() => {\n                                handleEditData(data);\n                              }}\n                            />\n                          </div>\n                          <div className=\"Driver-action--delete\">\n                            <DeleteIcon\n                              onClick={() => {\n                                setopenDeleteModal(true);\n                                setSelectedId(data.ID);\n                              }}\n                            />\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                  </React.Fragment>\n                );\n              })\n              : null}\n          </tbody>\n        </table>}\n\n      {openDeleteModal && (\n        <>\n          <ConfirmationModal\n            openModal={openDeleteModal}\n            handleClose={() => {\n              setopenDeleteModal(false);\n              setSelectedId(null);\n            }}\n            handleDeleteFun={onDeleteDriver}\n          />\n        </>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default DriverList;\n","import React from \"react\";\nimport \"./style.scss\";\n\nexport const ComponentToPrint = React.forwardRef(\n  ({ fieldsTitles, Pagetitle, Showdate, Showday, dataToShow = [] }, ref) => {\n\n    const [currentdate, setcurrentdate] = React.useState()\n\n    var d = new Date()\n    const weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let day = weekday[d.getDay()];\n\n    function formatDate() {\n      var d = new Date(),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n      if (month.length < 2)\n        month = '0' + month;\n      if (day.length < 2)\n        day = '0' + day;\n\n      return [month,day,year].join('/');\n    }\n    \n    React.useEffect(() => {\n      if (Showdate) {\n        const tmp = formatDate()\n        setcurrentdate(tmp)\n      }\n    }, [])\n\n    // React.useEffect(() => {\n    //   console.log(\"Showdate\", Showdate);\n    // }, [Showdate])\n    // React.useEffect(() => {\n    //   console.log(\"Showday\", Showday);\n    // }, [Showday])\n\n    return (\n      <div ref={ref} className=\"p-2 w-100\">\n        <div className=\"d-flex justify-content-end w-100\">\n          <p className=\"small_text\">\n            {/* {window.location.href.replaceAll(\"/dashboard/driver\", \"\")}@ */}\n            {/* {new Date().toLocaleString()} */}\n          </p>\n        </div>\n        <div className=\"d-flex justify-content-center w-100 mt-4 mb-3\">\n          <img\n            src=\"../../assets/image/logo-large-callahead.png\"\n            height={60}\n            style={{ marginTop: \"-20px\" }}\n            alt=\"collahead_logo\"\n          />\n        </div>\n\n        <div className=\"PageTitle\">\n          <div >\n            {Pagetitle.pagetitle}\n          </div>\n          <div style={{ marginLeft: \"15px\" }}>\n            {Showdate ? currentdate : \"\"}\n          </div>\n          <div style={{ marginLeft: \"15px\" }} >\n            {Showday ? day : \"\"}\n          </div>\n        </div>\n\n\n        <table className=\"w-100\">\n          <thead >\n            <tr style={{ borderBottom: \"2px solid black\" }}>\n              {/* <th className=\"custome_table--th\">#</th> */}\n              {fieldsTitles.map((data, i) => {\n                return (\n                  <th key={i} className=\"custome_table--th\" style={{ color: \"black\" }}>\n                    {data.title}\n                  </th>\n                );\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {dataToShow.map((data, index) => {\n              return (\n                <React.Fragment key={index}>\n                  <tr className=\"custome_table--tr\" style={{ borderBottom: \"0.5px solid black\" }}>\n                    {/* <td className=\"custome_table--td\">{`${index + 1}.`}</td> */}\n                    {fieldsTitles.map((field, i) => {\n                      return (\n                        <td key={i} className=\"custome_table--td p-2\">\n                          <small>{data[field.value]}</small>\n                        </td>\n                      );\n                    })}\n                  </tr>\n                </React.Fragment>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n);\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nconst CenterModel = (props) => {\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          {props.title}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{props.children}</Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"danger\" onClick={props.onHide}>\n          Close\n        </Button>\n        <Button onClick={props.onSubmit}>\n          {props.submittext ? props.submittext : \"Save\"}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default CenterModel;\n","import * as React from \"react\";\nimport { useReactToPrint } from \"react-to-print\";\nimport { ComponentToPrint } from \"./ComponentToPrint\";\nimport { Button, Form, InputGroup, Spinner, Row, Col } from \"react-bootstrap\";\nimport CenterModel from \"../Driver/CenterModel/CenterModel\";\n\nexport const PrintDriver = ({ dataToShow = [] }) => {\n  const defaultTitles = [\n    {\n      title: \"Code\",\n      value: \"ID\",\n      include: true,\n    },\n    {\n      title: \"Name\",\n      value: \"NAME\",\n      include: true,\n    },\n    {\n      title: \"Route\",\n      value: \"ROUTE\",\n      include: true,\n    },\n    {\n      title: \"County\",\n      value: \"COUNTY\",\n      include: true,\n    },\n    {\n      title: \"Truck\",\n      value: \"TRUCK\",\n      include: true,\n    },\n    {\n      title: \"MB\",\n      value: \"MB\",\n      include: true,\n    },\n    {\n      title: \"Notes\",\n      value: \"NOTES\",\n      include: true,\n    },\n    {\n      title: \"Phone\",\n      value: \"PHONE\",\n      include: true,\n    },\n  ];\n\n  const componentRef = React.useRef(null);\n  const [fieldTitles, setFieldTitles] = React.useState(defaultTitles);\n  const [printTitle, setprintTitle] = React.useState({ pagetitle: \"PUMP DRIVER LOG \" })\n  const [Showdate, setShowdate] = React.useState(true)\n  const [Showday, setShowday] = React.useState(true)\n\n  const onBeforeGetContentResolve = React.useRef(null);\n  const [show, setShow] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n  const [text, setText] = React.useState(\"old boring text\");\n\n  const handleAfterPrint = React.useCallback(() => {\n    console.log(\"`onAfterPrint` called\"); // eslint:disable-line no-console\n  }, []);\n\n  const handleBeforePrint = React.useCallback(() => {\n    handleCloseModal();\n    console.log(\"`onBeforePrint` called\"); // eslint:disable-line no-console\n  }, []);\n\n  const handleOnBeforeGetContent = React.useCallback(() => {\n    console.log(\"`onBeforeGetContent` called\"); // eslint:disable-line no-console\n    setLoading(true);\n    setText(\"Loading new text...\");\n\n    return new Promise((resolve) => {\n      onBeforeGetContentResolve.current = resolve;\n\n      setTimeout(() => {\n        setLoading(false);\n        setText(\"New, Updated Text!\");\n        resolve();\n      }, 2000);\n    });\n  }, [setLoading, setText]);\n\n  const reactToPrintContent = React.useCallback(() => {\n    return componentRef.current;\n  }, [componentRef.current]);\n\n  const handlePrint = useReactToPrint({\n    content: reactToPrintContent,\n    documentTitle: \"Truck Tracking | Dashboard | Driver\",\n    onBeforeGetContent: handleOnBeforeGetContent,\n    onBeforePrint: handleBeforePrint,\n    onAfterPrint: handleAfterPrint,\n    removeAfterPrint: true,\n  });\n\n  React.useEffect(() => {\n    if (\n      text === \"New, Updated Text!\" &&\n      typeof onBeforeGetContentResolve.current === \"function\"\n    ) {\n      onBeforeGetContentResolve.current();\n    }\n  }, [onBeforeGetContentResolve.current, text]);\n\n  const handleChange = (e, i) => {\n    // e.preventDefault();\n    const fields = fieldTitles;\n    fields[i] = {\n      ...fields[i],\n      include: e.target.checked,\n    };\n    console.log(\"==>\", fields);\n    setFieldTitles(fields);\n  };\n\n  const handleInputChange = (e) => {\n    setprintTitle({ ...printTitle, [e.target.name]: e.target.value });\n  }\n  // console.log(\"==>\", printTitle);\n\n  const handleCloseModal = () => {\n    setFieldTitles(defaultTitles);\n    setShow(false);\n    setprintTitle({ pagetitle: \"PUMP DRIVER LOG \" })\n  };\n  const handleOpenModal = () => {\n    setShow(true);\n\n  };\n  return (\n    <div>\n      <Button\n        className=\"DriverDashboard__content__nav--btn\"\n        onClick={handleOpenModal}\n      >\n        Print\n      </Button>\n      <CenterModel\n        title={\"Print Drivers\"}\n        submittext={\n          loading ? (\n            <div className=\"px-3\">\n              <Spinner animation=\"border\" size=\"sm\" />\n            </div>\n          ) : (\n            <div className=\"px-2\">Print</div>\n          )\n        }\n        show={show}\n        onSubmit={handlePrint}\n        onHide={handleCloseModal}\n      >\n        <Form>\n          <Row>\n            <Row>\n              <div className=\"MainTitleField\">\n                <div className=\"Printdriver\">\n                  {/* <div className=\"Printdriver__label\">\n                    <Form.Label className=\"AddDriver__content--Form_lable\"                >\n                      Enter Title :\n                    </Form.Label>\n                  </div> */}\n                  <div className=\"Printdriver__input\">\n                    <Form.Control\n                      type=\"text\"\n                      onChange={handleInputChange}\n                      name=\"pagetitle\"\n                      placeholder=\"Enter Title\"\n                      value={printTitle.pagetitle}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"Printdriver__Checkbox\">\n                  <div className=\"Printdriver__Checkbox--checkbx\">\n                    <Form.Check\n                      defaultChecked={true}\n                      label={\"Date\"}\n                      onChange={() => {\n                        setShowdate(!Showdate);\n                      }}\n                    />\n                  </div>\n                  <div className=\"Printdriver__Checkbox--checkbx\">\n                    <Form.Check\n                      defaultChecked={true}\n                      label={\"Day\"}\n                      onChange={() => {\n                        setShowday(!Showday);\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </Row>\n            <div className=\"ModelTitle\">\n              \n            </div>\n            {/* <div className=\"ModelTitle\">\n              <p>Select Fields</p>\n            </div> */}\n\n            {/* <Row>\n              <Col md={6} >\n                <div className=\"mb-3\">\n                  <Form.Check\n                    defaultChecked={true}\n                    label={\"Date\"}\n                    onChange={() => {\n                      setShowdate(!Showdate);\n                    }}\n                  />\n                </div>\n              </Col>\n              <Col md={6} >\n                <div className=\"mb-3\">\n                  <Form.Check\n                    defaultChecked={true}\n                    label={\"Day\"}\n                    onChange={() => {\n                      setShowday(!Showday);\n                    }}\n                  />\n                </div>\n              </Col>\n            </Row> */}\n\n            {fieldTitles.map((data, i) => {\n              return (\n                <Col md={6} key={i}>\n                  <div key={`default-checkbox`} className=\"mb-3\">\n                    <Form.Check\n                      type={`checkbox`}\n                      id={data.title}\n                      defaultChecked={data.include}\n                      value={data.include}\n                      name={data.value}\n                      label={data.title}\n                      onChange={(e) => {\n                        handleChange(e, i);\n                      }}\n                    />\n                  </div>\n                </Col>\n              );\n            })}\n          </Row>\n        </Form>\n      </CenterModel>\n      <div hidden>\n        <ComponentToPrint\n          ref={componentRef}\n          fieldsTitles={fieldTitles.filter((a) => a.include)}\n          dataToShow={dataToShow}\n          Pagetitle={printTitle}\n          Showdate={Showdate}\n          Showday={Showday}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n// import helmet for update title\nimport { Helmet } from \"react-helmet\";\n// import react bootstrap component\nimport { Button, Form } from \"react-bootstrap\";\n// history import\nimport { useNavigate } from \"react-router-dom\";\n\nimport { GetDriverApi, GetFridayDriversApi } from \"../../../ApiRequests\";\n\nimport DriverList from \"../../../Components/Driver/DriverList\";\n\nimport CommanPage from \"../CommanPage\";\nimport \"./style.scss\";\nimport { PrintDriver } from \"../../../Components/Print/PrintDriver\";\n\nconst DriverDashboard = () => {\n  const navigate = useNavigate();\n  const [driverListData, setdriverListData] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [paginationConfig, setPaginationConfig] = useState(null);\n  const [token, setToken] = useState(\"\");\n  const [pageConfig, setpageConfig] = useState({ page: 1, perPage: 10 });\n  const [switchData, setSwitchData] = useState(localStorage.getItem(\"switchData\") == 'true');\n  const [title, setTitle] = useState('Drivers (Mon-Thurs)');\n\n  React.useEffect(() => {\n    const tokenData = localStorage.getItem(\"auth\");\n    setSwitchData(localStorage.getItem(\"switchData\") == 'true');\n    setToken(JSON.parse(tokenData));\n  }, []);\n\n  React.useEffect(() => {\n    if (switchData) {\n      setTitle('Drivers - Friday');\n    } else {\n      setTitle('Drivers ( Mon-Thurs )');\n    }\n  }, [switchData]);\n\n  const getDriverList = () => {\n    const tokenData = localStorage.getItem(\"auth\");\n    setisLoading(true);\n    if (switchData) {\n      GetFridayDriversApi(JSON.parse(tokenData), pageConfig.page, pageConfig.perPage)\n        .then((res) => {\n          if (res.data.success) {\n            const responseAF = Array.from(res.data.data.data);\n            setisLoading(false);\n            setdriverListData(responseAF);\n            setPaginationConfig({\n              page: res.data.data.page,\n              perPage: res.data.data.perPage,\n              totalPages: res.data.data.totalPages,\n            });\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    } else {\n      GetDriverApi(JSON.parse(tokenData), pageConfig.page, pageConfig.perPage)\n        .then((res) => {\n          if (res.data.success) {\n            const responseAF = Array.from(res.data.data.data);\n            setisLoading(false);\n            setdriverListData(responseAF);\n            setPaginationConfig({\n              page: res.data.data.page,\n              perPage: res.data.data.perPage,\n              totalPages: res.data.data.totalPages,\n            });\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  React.useEffect(() => {\n    getDriverList();\n  }, [pageConfig, switchData]);\n\n  const nextPrevFunc = (type) => {\n    if (type === \"next\") {\n      if (pageConfig.page < paginationConfig.totalPages) {\n        setpageConfig({ ...pageConfig, page: pageConfig.page + 1 });\n      }\n    } else {\n      if (pageConfig.page > 1) {\n        setpageConfig({ ...pageConfig, page: pageConfig.page - 1 });\n      }\n    }\n  };\n\n  const handleChangePerPage = (e) => {\n    const { value } = e.target;\n    setpageConfig({ page: 1, perPage: value });\n  };\n\n  const onClickSwitch = () => {\n    localStorage.setItem(\"switchData\", !switchData);\n    setSwitchData(!switchData);\n  }\n\n  return (\n    <React.Fragment>\n      {/* helmet is use to change a title tag */}\n      <Helmet>\n        <title>Truck Tracking | Dashboard | Driver</title>\n      </Helmet>\n      {/* CommanPage is user for basic structure of page */}\n      <CommanPage>\n        <div className=\"DriverDashboard__content\">\n          <div className=\"DriverDashboard__content__nav\">\n            <div className=\"DriverDashboard__content__nav--text\" style={{ display: 'flex' }}>\n              <p className=\"p\">{title}</p>\n              <label class=\"switch \">\n                <input type=\"checkbox\" checked={switchData} onClick={() => onClickSwitch()} />\n                <span class=\"slider round\"></span>\n              </label>\n            </div>\n            <div className=\"d-flex\">\n              <PrintDriver dataToShow={driverListData} />\n              <Button\n                onClick={() => {\n                  navigate(\"/dashboard/driver/add\");\n                }}\n                className=\"DriverDashboard__content__nav--btn\"\n              >\n                + Add\n              </Button>\n            </div>\n          </div>\n          <div className=\"\">\n            <DriverList driverListData={driverListData} isLoading={isLoading} switchData={switchData} />\n            {paginationConfig?.totalPages && (\n              <div className=\"DriverDashboard__Pagination alignItemsCenter\">\n                <div>\n                  <Form.Select\n                    aria-label=\"Default select example\"\n                    value={pageConfig.perPage}\n                    onChange={handleChangePerPage}\n                  >\n                    <option value=\"5\">5</option>\n                    <option value=\"10\">10</option>\n                    <option value=\"25\">25</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"all\">All</option>\n                  </Form.Select>\n                </div>\n                <div className=\"DriverDashboard__Pagination--content\">\n                  <div>\n                    <Button\n                      // disabled={pageConfig.page < 1}\n                      onClick={() => {\n                        nextPrevFunc(\"prev\");\n                      }}\n                      className=\"DriverDashboard__Pagination--prev DriverDashboard__content__nav--btn\"\n                    >\n                      {\"< Prev\"}\n                    </Button>\n                  </div>\n                  <div>\n                    {pageConfig.page} out {paginationConfig.totalPages || 0}{\" \"}\n                  </div>\n                  <div>\n                    <Button\n                      onClick={() => {\n                        nextPrevFunc(\"next\");\n                      }}\n                      className=\"DriverDashboard__Pagination--next DriverDashboard__content__nav--btn\"\n                    >\n                      {\"Next >\"}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </CommanPage>\n    </React.Fragment>\n  );\n};\n\nexport default DriverDashboard;\n"],"names":["openModal","handleClose","handleDeleteFun","Modal","show","onHide","closeButton","Button","onClick","variant","className","driverListData","isLoading","switchData","navigate","useNavigate","useState","listDriver","setlistDriver","openDeleteModal","setopenDeleteModal","SelectedId","setSelectedId","useEffect","Spinner","animation","map","data","index","NAME","ROUTE","COUNTY","TRUCK","MB","NOTES","PHONE","ROUTE_DAY","driverdata","tmpData","Object","assign","stringyfyDatED","JSON","stringify","localStorage","setItem","editData","EditDriverOA","is_friday_drivers","handleEditData","ID","deleteData","id","tokenData","getItem","DeleteDriverApi","parse","then","res","console","log","success","newData","Array","from","filter","toast","catch","err","ComponentToPrint","React","ref","fieldsTitles","Pagetitle","Showdate","Showday","dataToShow","currentdate","setcurrentdate","day","Date","getDay","tmp","d","month","getMonth","getDate","year","getFullYear","length","join","formatDate","src","height","style","marginTop","alt","pagetitle","marginLeft","borderBottom","i","color","title","field","value","props","size","centered","children","onSubmit","submittext","PrintDriver","defaultTitles","include","componentRef","fieldTitles","setFieldTitles","printTitle","setprintTitle","setShowdate","setShowday","onBeforeGetContentResolve","setShow","loading","setLoading","text","setText","handleAfterPrint","handleBeforePrint","handleCloseModal","handleOnBeforeGetContent","Promise","resolve","current","setTimeout","reactToPrintContent","handlePrint","useReactToPrint","content","documentTitle","onBeforeGetContent","onBeforePrint","onAfterPrint","removeAfterPrint","Form","Row","type","onChange","e","target","name","placeholder","defaultChecked","label","Col","md","fields","checked","handleChange","hidden","a","setdriverListData","setisLoading","paginationConfig","setPaginationConfig","setToken","page","perPage","pageConfig","setpageConfig","setSwitchData","setTitle","GetFridayDriversApi","responseAF","totalPages","GetDriverApi","getDriverList","nextPrevFunc","Helmet","CommanPage","display","class"],"sourceRoot":""}